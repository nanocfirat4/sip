include /etc/nginx/sites-enabled/*;

events {
  worker_connections 1024;
}

http {

   # HTTP --> redirect to HTTPS
   server {
      listen 80 default_server;
      server_name v000561.fhnw.ch;
      
      location /.well-known/acme-challenge/ {
         root /var/www/certbot;
      }

      location /status/ {
         proxy_pass http://status:80/;
         rewrite /status(.*) $1 break;
      }

      location / {
         return 301 https://$host$request_uri;
      }
   }

   # HTTPS
   server {
      server_name v000561.fhnw.ch;
      listen 443 ssl;
   
      include /etc/letsencrypt/options-ssl-nginx.conf;
      ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;

      ssl_certificate  /etc/letsencrypt/live/v000561.fhnw.ch/fullchain.pem;   # SSL Certifiicate
      ssl_certificate_key /etc/letsencrypt/live/v000561.fhnw.ch/privkey.pem;  # SSL Privatekey
      
      proxy_set_header X-Forwarded-For $proxy_protocol_addr;   # To forward the original client's IP address 
      proxy_set_header X-Forwarded-Proto $scheme;              # to forward the  original protocol (HTTP or HTTPS)
      proxy_set_header Host $host;                             # to forward the original host requested by the client
      
      location  /orthanc/  {
         # catch 404 from OPTIONS requests sent by Browsers (CORS), return 200 OK
         if ($request_method = OPTIONS ) {
            add_header Content-Type text/plain;
            add_header 'Access-Control-Allow-Headers' 'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
            add_header 'Access-Control-Allow-Origin' '*' always;
            return 200;
         }

         proxy_pass http://orthanc:8042;
         rewrite /orthanc(.*) $1 break;
         add_header 'Access-Control-Allow-Origin' '*';
      }

      location /status/ {
         proxy_pass http://status:80/;
         rewrite /status(.*) $1 break;
      }

      location /auth {
         proxy_pass http://keycloak:8080;
      }

      location /api {
         proxy_pass http://api:8081/api;
      }

      location / {
         proxy_pass http://react:3000/;

         # The following is for the websocket connection of the webpack dev server (https://gist.github.com/simongfxu/ea128160c296f31e41e6)
         proxy_redirect off;
         proxy_http_version 1.1;
         proxy_set_header Upgrade $http_upgrade;
         proxy_set_header Connection "upgrade";
      }
   }
}