{"ast":null,"code":"var _jsxFileName = \"/home/firat/Documents/SIP/sip2021-01-sth/sip-React/course-react/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { ReactKeycloakProvider } from '@react-keycloak/web';\nimport keycloak from './keycloak'; // const eventLogger = (event, error) => {\n//   console.log('onKeycloakEvent', event, error)\n// }\n// const tokenLogger = (tokens) => {\n//   console.log('onKeycloakTokens', tokens)\n// }\n// ReactDOM.render(\n//   <React.StrictMode>\n//     <ReactKeycloakProvider keycloak={keycloak} authClient={keycloak} onEvent={eventLogger} onTokens={tokenLogger}>\n//       <App />\n//     </ReactKeycloakProvider>\n//   </React.StrictMode>,\n//   document.getElementById('root')\n// );\n//Initialization of the keycloak instance\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nkeycloak.init({\n  onLoad: 'login-required'\n}).success(authenticated => {\n  console.log(keycloak);\n  console.log(authenticated); // console.log(getState().keycloakLogin);\n\n  if (!authenticated) {\n    window.location.reload();\n  } else {\n    console.info(\"Authenticated\");\n  } //React Render on authentication\n\n\n  ReactDOM.render( /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 19\n  }, this), document.getElementById('root')); //store authentication tokens in sessionStorage\n\n  sessionStorage.setItem('authentication', keycloak.token);\n  sessionStorage.setItem('refreshToken', keycloak.refreshToken); //to regenerate token on expiry\n\n  setTimeout(() => {\n    keycloak.updateToken(70).success(refreshed => {\n      if (refreshed) {\n        console.debug('Token refreshed' + refreshed);\n      } else {\n        console.warn('Token not refreshed, valid for ' + Math.round(keycloak.tokenParsed.exp + keycloak.timeSkew - new Date().getTime() / 1000) + ' seconds');\n      }\n    }).error(() => {\n      console.error('Failed to refresh token');\n    });\n  }, 60000);\n}).error(() => {\n  console.error(\"Authenticated Failed\");\n});\nreportWebVitals();","map":{"version":3,"sources":["/home/firat/Documents/SIP/sip2021-01-sth/sip-React/course-react/src/index.js"],"names":["React","ReactDOM","App","reportWebVitals","ReactKeycloakProvider","keycloak","init","onLoad","success","authenticated","console","log","window","location","reload","info","render","document","getElementById","sessionStorage","setItem","token","refreshToken","setTimeout","updateToken","refreshed","debug","warn","Math","round","tokenParsed","exp","timeSkew","Date","getTime","error"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,aAAP;AACA,OAAOC,GAAP,MAAgB,WAAhB;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,OAAO,sCAAP;AACA,SAASC,qBAAT,QAAsC,qBAAtC;AACA,OAAOC,QAAP,MAAqB,YAArB,C,CAEA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;;;AACAA,QAAQ,CAACC,IAAT,CAAc;AAAEC,EAAAA,MAAM,EAAE;AAAV,CAAd,EAA4CC,OAA5C,CAAqDC,aAAD,IAAmB;AACrEC,EAAAA,OAAO,CAACC,GAAR,CAAYN,QAAZ;AACAK,EAAAA,OAAO,CAACC,GAAR,CAAYF,aAAZ,EAFqE,CAGrE;;AACA,MAAI,CAACA,aAAL,EAAoB;AAChBG,IAAAA,MAAM,CAACC,QAAP,CAAgBC,MAAhB;AACH,GAFD,MAEO;AACHJ,IAAAA,OAAO,CAACK,IAAR,CAAa,eAAb;AACH,GARoE,CAUrE;;;AACAd,EAAAA,QAAQ,CAACe,MAAT,eAAgB,QAAC,GAAD;AAAA;AAAA;AAAA;AAAA,UAAhB,EAAyBC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAAzB,EAXqE,CAarE;;AACAC,EAAAA,cAAc,CAACC,OAAf,CAAuB,gBAAvB,EAAyCf,QAAQ,CAACgB,KAAlD;AACAF,EAAAA,cAAc,CAACC,OAAf,CAAuB,cAAvB,EAAuCf,QAAQ,CAACiB,YAAhD,EAfqE,CAiBrE;;AACAC,EAAAA,UAAU,CAAC,MAAM;AACblB,IAAAA,QAAQ,CAACmB,WAAT,CAAqB,EAArB,EAAyBhB,OAAzB,CAAkCiB,SAAD,IAAe;AAC5C,UAAIA,SAAJ,EAAe;AACXf,QAAAA,OAAO,CAACgB,KAAR,CAAc,oBAAoBD,SAAlC;AACH,OAFD,MAEO;AACHf,QAAAA,OAAO,CAACiB,IAAR,CAAa,oCACPC,IAAI,CAACC,KAAL,CAAWxB,QAAQ,CAACyB,WAAT,CAAqBC,GAArB,GAA2B1B,QAAQ,CAAC2B,QAApC,GAA+C,IAAIC,IAAJ,GAAWC,OAAX,KAAuB,IAAjF,CADO,GACkF,UAD/F;AAEH;AACJ,KAPD,EAOGC,KAPH,CAOS,MAAM;AACXzB,MAAAA,OAAO,CAACyB,KAAR,CAAc,yBAAd;AACH,KATD;AAYH,GAbS,EAaP,KAbO,CAAV;AAeD,CAjCD,EAiCGA,KAjCH,CAiCS,MAAM;AACbzB,EAAAA,OAAO,CAACyB,KAAR,CAAc,sBAAd;AACD,CAnCD;AAqCAhC,eAAe","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { ReactKeycloakProvider } from '@react-keycloak/web'\nimport keycloak from './keycloak'\n\n// const eventLogger = (event, error) => {\n//   console.log('onKeycloakEvent', event, error)\n// }\n\n// const tokenLogger = (tokens) => {\n//   console.log('onKeycloakTokens', tokens)\n// }\n\n\n// ReactDOM.render(\n//   <React.StrictMode>\n//     <ReactKeycloakProvider keycloak={keycloak} authClient={keycloak} onEvent={eventLogger} onTokens={tokenLogger}>\n//       <App />\n//     </ReactKeycloakProvider>\n//   </React.StrictMode>,\n//   document.getElementById('root')\n// );\n\n\n//Initialization of the keycloak instance\nkeycloak.init({ onLoad: 'login-required' }).success((authenticated) => {\n  console.log(keycloak);\n  console.log(authenticated);\n  // console.log(getState().keycloakLogin);\n  if (!authenticated) {\n      window.location.reload();\n  } else {\n      console.info(\"Authenticated\");\n  }\n\n  //React Render on authentication\n  ReactDOM.render(<App />, document.getElementById('root'));\n\n  //store authentication tokens in sessionStorage\n  sessionStorage.setItem('authentication', keycloak.token);\n  sessionStorage.setItem('refreshToken', keycloak.refreshToken);\n\n  //to regenerate token on expiry\n  setTimeout(() => {\n      keycloak.updateToken(70).success((refreshed) => {\n          if (refreshed) {\n              console.debug('Token refreshed' + refreshed);\n          } else {\n              console.warn('Token not refreshed, valid for '\n                  + Math.round(keycloak.tokenParsed.exp + keycloak.timeSkew - new Date().getTime() / 1000) + ' seconds');\n          }\n      }).error(() => {\n          console.error('Failed to refresh token');\n      });\n\n\n  }, 60000)\n\n}).error(() => {\n  console.error(\"Authenticated Failed\");\n});\n\nreportWebVitals();\n"]},"metadata":{},"sourceType":"module"}