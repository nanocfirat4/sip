{"ast":null,"code":"var _jsxFileName = \"/home/firat/Documents/SIP/sip2021-01-sth/sip-React/course-react/src/App.jsx\";\nimport React, { Component } from 'react';\nimport ViewMode from './components/ViewMode';\nimport AppNavBar from './components/AppNavBar';\nimport { ImageService } from './services/ImageService';\nimport { CommentService } from './services/CommentService';\nimport { TagService } from './services/TagService';\nimport keycloak from './keycloak';\nimport ThumbnailList from './components/ThumbnailList';\nimport About from './components/About';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport './App.css';\nimport { Container } from 'react-bootstrap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.searchImages = this.searchImages.bind(this);\n    this.updateComments = this.updateComments.bind(this);\n    this.updateMatchingComments = this.updateMatchingComments.bind(this);\n    this.state = {\n      isLoading: false,\n      selectedImages: [],\n      images: [],\n      comments: [],\n      tags: [],\n      matchingComments: []\n    };\n  } // Load all images, Tags and Comments on App start\n\n\n  componentDidMount() {\n    this.setState({\n      isLoading: true\n    });\n    ImageService.authToken(keycloak.token);\n    ImageService.findAll().then(res => {\n      this.setState({\n        images: res.data\n      });\n    });\n    CommentService.authToken(keycloak.token);\n    CommentService.findAll().then(res => {\n      this.setState({\n        comments: res.data\n      });\n    });\n    TagService.authToken(keycloak.token);\n    TagService.findAll().then(res => {\n      this.setState({\n        tags: res.data\n      });\n      console.log(this.state.tags);\n    });\n    this.setState({\n      isLoading: false\n    });\n  } // Search images by txt\n  // TODO -> use the parameter of the function instead of all tags\n\n\n  searchImages(textTokens, searchTags) {\n    this.setState({\n      isLoading: true\n    });\n    ImageService.authToken(keycloak.token);\n    ImageService.findByFilter(textTokens, searchTags).then(res => {\n      this.setState({\n        images: res.data,\n        selectedImages: [],\n        matchingComments: [],\n        isLoading: false\n      });\n    });\n  } // Check which comments do all selected images have in common\n\n\n  updateMatchingComments() {\n    var allComments = this.state.selectedImages.map(image => {\n      return image.imageCommentsList.map(comment => {\n        return comment.id;\n      });\n    });\n    var matchingComments = [];\n\n    if (allComments.length > 0) {\n      // Filter Comments\n      var result = allComments.shift().filter(function (v) {\n        return allComments.every(function (a) {\n          return a.indexOf(v) !== -1;\n        });\n      }); // Add Comments to state\n\n      for (var j = 0; j < this.state.comments.length; j++) {\n        for (var i = 0; i < result.length; i++) {\n          if (this.state.comments[j].id == result[i]) {\n            matchingComments.push(this.state.comments[j]);\n          }\n        }\n      }\n    }\n\n    this.setState({\n      matchingComments: matchingComments\n    });\n  } // Update all Coments\n\n\n  updateComments() {\n    CommentService.authToken(keycloak.token);\n    CommentService.findAll().then(res => {\n      this.setState({\n        comments: res.data\n      });\n    });\n  }\n\n  render() {\n    const {\n      isLoading,\n      images,\n      selectedImages,\n      tags,\n      matchingComments\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(Container, {\n      fluid: true,\n      children: [keycloak.token, /*#__PURE__*/_jsxDEV(Router, {\n        children: [/*#__PURE__*/_jsxDEV(AppNavBar, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Switch, {\n          children: [/*#__PURE__*/_jsxDEV(Route, {\n            exact: true,\n            path: \"/\",\n            children: /*#__PURE__*/_jsxDEV(ThumbnailList, {\n              tags: tags,\n              isLoading: isLoading,\n              images: images,\n              searchImages: this.searchImages,\n              selectedImages: selectedImages,\n              updateComments: this.updateComments,\n              matchingComments: matchingComments,\n              updateMatchingComments: this.updateMatchingComments\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 119,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Route, {\n            path: \"/about\",\n            component: About\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Route, {\n            path: \"/view\",\n            children: /*#__PURE__*/_jsxDEV(ViewMode, {\n              selectedImages: this.state.selectedImages,\n              matchingComments: matchingComments,\n              updateMatchingComments: this.updateMatchingComments\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 124,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/firat/Documents/SIP/sip2021-01-sth/sip-React/course-react/src/App.jsx"],"names":["React","Component","ViewMode","AppNavBar","ImageService","CommentService","TagService","keycloak","ThumbnailList","About","BrowserRouter","Router","Route","Switch","Container","App","constructor","props","searchImages","bind","updateComments","updateMatchingComments","state","isLoading","selectedImages","images","comments","tags","matchingComments","componentDidMount","setState","authToken","token","findAll","then","res","data","console","log","textTokens","searchTags","findByFilter","allComments","map","image","imageCommentsList","comment","id","length","result","shift","filter","v","every","a","indexOf","j","i","push","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport ViewMode from './components/ViewMode'\nimport AppNavBar from './components/AppNavBar'\nimport { ImageService } from './services/ImageService'\nimport { CommentService } from './services/CommentService'\nimport { TagService } from './services/TagService'\nimport keycloak from './keycloak'\nimport ThumbnailList from './components/ThumbnailList'\nimport About from './components/About'\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\n\nimport './App.css'\nimport { Container } from 'react-bootstrap'\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.searchImages = this.searchImages.bind(this)\n    this.updateComments = this.updateComments.bind(this)\n    this.updateMatchingComments = this.updateMatchingComments.bind(this)\n    \n    this.state = {\n      isLoading: false,\n      selectedImages: [],\n      images: [],\n      comments: [],\n      tags: [],\n      matchingComments: []\n    };\n  }\n\n  // Load all images, Tags and Comments on App start\n  componentDidMount() {\n    this.setState({ isLoading: true })\n    ImageService.authToken(keycloak.token)\n    ImageService.findAll().then((res) => {\n      this.setState({ images: res.data });\n    });\n\n    CommentService.authToken(keycloak.token)\n    CommentService.findAll().then((res) => {\n      this.setState({ comments: res.data });\n    });\n\n    TagService.authToken(keycloak.token)\n    TagService.findAll().then((res) => {\n      this.setState({ tags: res.data })\n      console.log(this.state.tags)\n    });\n\n    this.setState({ isLoading: false })\n  }\n\n  // Search images by txt\n  // TODO -> use the parameter of the function instead of all tags\n  searchImages(textTokens, searchTags) {\n    this.setState({ isLoading: true })\n    ImageService.authToken(keycloak.token)\n    ImageService.findByFilter(textTokens, searchTags).then((res) => {\n      this.setState({\n        images: res.data,\n        selectedImages: [],\n        matchingComments: [],\n        isLoading: false\n      });\n    });\n  }\n\n  // Check which comments do all selected images have in common\n  updateMatchingComments() {\n    var allComments = this.state.selectedImages.map(image => { return image.imageCommentsList.map(comment => { return comment.id }) });\n    var matchingComments = []\n\n    if (allComments.length > 0) {\n      // Filter Comments\n      var result = allComments.shift().filter(function (v) {\n        return allComments.every(function (a) {\n          return a.indexOf(v) !== -1;\n        });\n      });\n      // Add Comments to state\n      for (var j = 0; j < this.state.comments.length; j++) {\n        for (var i = 0; i < result.length; i++) {\n          if (this.state.comments[j].id == result[i]) {\n            matchingComments.push(this.state.comments[j]);\n          }\n        }\n      }\n    }\n    this.setState({\n      matchingComments: matchingComments\n    });\n  }\n\n\n  // Update all Coments\n  updateComments() {\n    CommentService.authToken(keycloak.token)\n    CommentService.findAll().then((res) => {\n      this.setState({ comments: res.data });\n    });\n  }\n\n\n\n  render() {\n    const { isLoading, images, selectedImages, tags, matchingComments } = this.state;\n\n    return (\n      <Container fluid>\n\n        {keycloak.token }\n\n        <Router>\n          <AppNavBar />\n          <Switch>\n            <Route exact path='/'>\n              <ThumbnailList tags={tags} isLoading={isLoading} images={images} searchImages={this.searchImages} selectedImages={selectedImages}\n                updateComments={this.updateComments} matchingComments={matchingComments} updateMatchingComments={this.updateMatchingComments} />\n            </Route>\n            <Route path='/about' component={About} />\n            <Route path='/view'>\n              <ViewMode selectedImages={this.state.selectedImages}  matchingComments = {matchingComments} updateMatchingComments={this.updateMatchingComments}/>\n            </Route>\n          </Switch>\n        </Router>\n      </Container>\n    )\n  }\n}\nexport default App\n"]},"metadata":{},"sourceType":"module"}